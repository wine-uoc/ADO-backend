# Copyright (c) Mainflux
# SPDX-License-Identifier: Apache-2.0

version: "3.7"

networks:
  mainflux-base-net:
    driver: bridge

volumes:
  mainflux-authn-db-volume:
  mainflux-users-db-volume:
  mainflux-things-db-volume:
  mainflux-things-redis-volume:
  mainflux-es-redis-volume:
  mainflux-influxdb-volume:
  mainflux-grafana-volume:

services:
  nginx:
    image: nginx:1.16.0-alpine
    container_name: mainflux-nginx
    restart: always
    volumes:
      - ./nginx/nginx-${AUTH-key}.conf:/etc/nginx/nginx.conf.template
      - ./nginx/entrypoint.sh:/entrypoint.sh
      - ./nginx/snippets:/etc/nginx/snippets
      - ./ssl/authorization.js:/etc/nginx/authorization.js
      - ./ssl/certs/mainflux-server.crt:/etc/ssl/certs/mainflux-server.crt
      - ./ssl/certs/ca.crt:/etc/ssl/certs/ca.crt
      - ./ssl/certs/mainflux-server.key:/etc/ssl/private/mainflux-server.key
      - ./ssl/dhparam.pem:/etc/ssl/certs/dhparam.pem
      - /etc/letsencrypt:/etc/letsencrypt
      - /var/www:/var/www
    ports:
      - 80:${MF_NGINX_HTTP_PORT}
      - ${MF_NGINX_SSL_PORT}:${MF_NGINX_SSL_PORT}
      - ${MF_NGINX_MQTT_PORT}:${MF_NGINX_MQTT_PORT}
      - ${MF_NGINX_MQTTS_PORT}:${MF_NGINX_MQTTS_PORT}
    networks:
      - mainflux-base-net
    env_file:
      - ../.env
    command: /entrypoint.sh && "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - things
      - users
      - http-adapter
      - ws-adapter
      - user-control
      - grafana
  
  nats:
    image: nats:1.3.0
    container_name: mainflux-nats
    restart: always
    networks:
      - mainflux-base-net

  authn-db:
    image: postgres:10.8-alpine
    container_name: mainflux-authn-db
    restart: always
    environment:
      POSTGRES_USER: ${MF_AUTHN_DB_USER}
      POSTGRES_PASSWORD: ${MF_AUTHN_DB_PASS}
      POSTGRES_DB: ${MF_AUTHN_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-authn-db-volume:/var/lib/postgresql/data

  authn:
    image: mainflux/authn:0.10.0
    container_name: mainflux-authn
    restart: always
    depends_on:
      - authn-db
    expose:
      - ${MF_AUTHN_GRPC_PORT}
    environment:
      MF_AUTHN_LOG_LEVEL: ${MF_AUTHN_LOG_LEVEL}
      MF_AUTHN_DB_HOST: authn-db
      MF_AUTHN_DB_PORT: ${MF_AUTHN_DB_PORT}
      MF_AUTHN_DB_USER: ${MF_AUTHN_DB_USER}
      MF_AUTHN_DB_PASS: ${MF_AUTHN_DB_PASS}
      MF_AUTHN_DB: ${MF_AUTHN_DB}
      MF_AUTHN_HTTP_PORT: ${MF_AUTHN_HTTP_PORT}
      MF_AUTHN_GRPC_PORT: ${MF_AUTHN_GRPC_PORT}
      MF_AUTHN_SECRET: ${MF_AUTHN_SECRET}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_AUTHN_HTTP_PORT}:${MF_AUTHN_HTTP_PORT}
      - ${MF_AUTHN_GRPC_PORT}:${MF_AUTHN_GRPC_PORT}
    networks:
      - mainflux-base-net

  users-db:
    image: postgres:10.8-alpine
    container_name: mainflux-users-db
    restart: always
    environment:
      POSTGRES_USER: ${MF_USERS_DB_USER}
      POSTGRES_PASSWORD: ${MF_USERS_DB_PASS}
      POSTGRES_DB: ${MF_USERS_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-users-db-volume:/var/lib/postgresql/data

  users:
    image: mainflux/users:0.10.0
    container_name: mainflux-users
    restart: always
    volumes:
      - ./users/emailer/templates/${MF_EMAIL_TEMPLATE}:/${MF_EMAIL_TEMPLATE}
    depends_on:
      - users-db
      - authn
    environment:
      MF_USERS_LOG_LEVEL: ${MF_USERS_LOG_LEVEL}
      MF_USERS_DB_HOST: users-db
      MF_USERS_DB_PORT: ${MF_USERS_DB_PORT}
      MF_USERS_DB_USER: ${MF_USERS_DB_USER}
      MF_USERS_DB_PASS: ${MF_USERS_DB_PASS}
      MF_USERS_DB: ${MF_USERS_DB}
      MF_USERS_HTTP_PORT: ${MF_USERS_HTTP_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
      MF_EMAIL_DRIVER: ${MF_EMAIL_DRIVER}
      MF_EMAIL_HOST: ${MF_EMAIL_HOST}
      MF_EMAIL_PORT: ${MF_EMAIL_PORT}
      MF_EMAIL_USERNAME: ${MF_EMAIL_USERNAME}
      MF_EMAIL_PASSWORD: ${MF_EMAIL_PASSWORD}
      MF_EMAIL_FROM_ADDRESS: ${MF_EMAIL_FROM_ADDRESS}
      MF_EMAIL_FROM_NAME: ${MF_EMAIL_FROM_NAME}
      MF_EMAIL_TEMPLATE: ${MF_EMAIL_TEMPLATE}
      MF_TOKEN_RESET_ENDPOINT: ${MF_TOKEN_RESET_ENDPOINT}
      MF_AUTHN_URL: authn:${MF_AUTHN_GRPC_PORT}
    ports:
      - ${MF_USERS_HTTP_PORT}:${MF_USERS_HTTP_PORT}
    networks:
      - mainflux-base-net

  things-db:
    image: postgres:10.8-alpine
    container_name: mainflux-things-db
    restart: always
    environment:
      POSTGRES_USER: ${MF_THINGS_DB_USER}
      POSTGRES_PASSWORD: ${MF_THINGS_DB_PASS}
      POSTGRES_DB: ${MF_THINGS_DB}
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-things-db-volume:/var/lib/postgresql/data

  things-redis:
    image: redis:5.0-alpine
    container_name: mainflux-things-redis
    restart: always
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-things-redis-volume:/data

  things:
    image: mainflux/things:0.10.0
    container_name: mainflux-things
    restart: always
    depends_on:
      - things-db
      - authn
    environment:
      MF_THINGS_LOG_LEVEL: ${MF_THINGS_LOG_LEVEL}
      MF_THINGS_DB_HOST: things-db
      MF_THINGS_DB_PORT: ${MF_THINGS_DB_PORT}
      MF_THINGS_DB_USER: ${MF_THINGS_DB_USER}
      MF_THINGS_DB_PASS: ${MF_THINGS_DB_PASS}
      MF_THINGS_DB: ${MF_THINGS_DB}
      MF_THINGS_CACHE_URL: things-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_ES_URL: es-redis:${MF_REDIS_TCP_PORT}
      MF_THINGS_HTTP_PORT: ${MF_THINGS_HTTP_PORT}
      MF_THINGS_AUTH_HTTP_PORT: ${MF_THINGS_AUTH_HTTP_PORT}
      MF_THINGS_AUTH_GRPC_PORT: ${MF_THINGS_AUTH_GRPC_PORT}
      MF_AUTH_URL: authn:${MF_AUTHN_GRPC_PORT}
      MF_THINGS_SECRET: ${MF_THINGS_SECRET}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_THINGS_HTTP_PORT}:${MF_THINGS_HTTP_PORT}
      - ${MF_THINGS_AUTH_HTTP_PORT}:${MF_THINGS_AUTH_HTTP_PORT}
      - ${MF_THINGS_AUTH_GRPC_PORT}:${MF_THINGS_AUTH_GRPC_PORT}
    networks:
      - mainflux-base-net

  jaeger:
    image: jaegertracing/all-in-one:1.13
    container_name: mainflux-jaeger
    restart: always
    ports:
      - ${MF_JAEGER_PORT}:${MF_JAEGER_PORT}/udp
      - ${MF_JAEGER_FRONTEND}:${MF_JAEGER_FRONTEND}
      - ${MF_JAEGER_COLLECTOR}:${MF_JAEGER_COLLECTOR}
      - ${MF_JAEGER_CONFIGS}:${MF_JAEGER_CONFIGS}
    networks:
      - mainflux-base-net

  ws-adapter:
    image: mainflux/ws:0.10.0
    container_name: mainflux-ws
    restart: always
    depends_on:
      - things
      - nats
    environment:
      MF_WS_ADAPTER_LOG_LEVEL: ${MF_WS_ADAPTER_LOG_LEVEL}
      MF_WS_ADAPTER_PORT: ${MF_WS_ADAPTER_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_THINGS_URL: things:${MF_THINGS_AUTH_GRPC_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_WS_ADAPTER_PORT}:${MF_WS_ADAPTER_PORT}
    networks:
      - mainflux-base-net

  http-adapter:
    image: mainflux/http:0.10.0
    container_name: mainflux-http
    restart: always
    depends_on:
      - things
      - nats
    environment:
      MF_HTTP_ADAPTER_LOG_LEVEL: debug
      MF_HTTP_ADAPTER_PORT: ${MF_HTTP_ADAPTER_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_THINGS_URL: things:${MF_THINGS_AUTH_GRPC_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_HTTP_ADAPTER_PORT}:${MF_HTTP_ADAPTER_PORT}
    networks:
      - mainflux-base-net

  es-redis:
    image: redis:5.0-alpine
    container_name: mainflux-es-redis
    restart: always
    networks:
      - mainflux-base-net
    volumes:
      - mainflux-es-redis-volume:/data

  coap-adapter:
    image: mainflux/coap:0.10.0
    container_name: mainflux-coap
    restart: always
    depends_on:
      - things
      - nats
    environment:
      MF_COAP_ADAPTER_LOG_LEVEL: ${MF_COAP_ADAPTER_LOG_LEVEL}
      MF_COAP_ADAPTER_PORT: ${MF_COAP_ADAPTER_PORT}
      MF_NATS_URL: ${MF_NATS_URL}
      MF_THINGS_URL: things:${MF_THINGS_AUTH_GRPC_PORT}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_COAP_ADAPTER_PORT}:${MF_COAP_ADAPTER_PORT}/udp
      - ${MF_COAP_ADAPTER_PORT}:${MF_COAP_ADAPTER_PORT}/tcp
    networks:
      - mainflux-base-net

  influxdb:
    image: influxdb:1.6.4-alpine
    container_name: mainflux-influxdb
    restart: always
    environment:
      INFLUXDB_DB: mainflux
      INFLUXDB_ADMIN_USER: mainflux
      INFLUXDB_ADMIN_PASSWORD: mainflux
    networks:
      - mainflux-base-net
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    ports:
      - ${MF_INFLUX_WRITER_DB_PORT}:${MF_INFLUX_WRITER_DB_PORT}
    volumes:
      - mainflux-influxdb-volume:/var/lib/influxdb
      - ./influx-conf/influxdb.conf:/etc/influxdb/influxdb.conf

  influxdb-writer:
    image: isuciu0/mainflux-influxdb-writer:04-12-2020
    container_name: mainflux-influxdb-writer
    restart: always
    depends_on:
      - influxdb
    environment:
      MF_INFLUX_WRITER_LOG_LEVEL: debug
      MF_NATS_URL: ${MF_NATS_URL}
      MF_INFLUX_WRITER_PORT: ${MF_INFLUX_WRITER_PORT}
      MF_INFLUX_WRITER_BATCH_SIZE: ${MF_INFLUX_WRITER_BATCH_SIZE}
      MF_INFLUX_WRITER_BATCH_TIMEOUT: ${MF_INFLUX_WRITER_BATCH_TIMEOUT}
      MF_INFLUX_WRITER_DB_NAME: ${MF_INFLUX_WRITER_DB_NAME}
      MF_INFLUX_WRITER_DB_HOST: mainflux-influxdb
      MF_INFLUX_WRITER_DB_PORT: ${MF_INFLUX_WRITER_DB_PORT}
      MF_INFLUX_WRITER_DB_USER: ${MF_INFLUX_WRITER_DB_USER}
      MF_INFLUX_WRITER_DB_PASS: ${MF_INFLUX_WRITER_DB_PASS}
    ports:
      - ${MF_INFLUX_WRITER_PORT}:${MF_INFLUX_WRITER_PORT}
    networks:
      - mainflux-base-net
    volumes:
      - ./addons/influxdb-writer/channels.toml:/config/channels.toml

  grafana:
    image: grafana/grafana:7.4.0 #isuciu0/grafana:alpine-7.3.4
    container_name: mainflux-grafana
    restart: always
    depends_on:
      - influxdb
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=${MF_ALLOW_EMBEDDING}
      - GF_SECURITY_ADMIN_USER=${MF_GRAFANA_ADMIN_NAME}
      - GF_SECURITY_ADMIN_PASSWORD={MF_GRAFANA_ADMIN_PASS}      
      - GF_INSTALL_PLUGINS=ryantxu-ajax-panel
      - GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS=ryantxu-ajax-panel
      - GF_PANELS_DISABLE_SANITIZE_HTML=true
      - GF_USERS_DEFAULT_THEME=light
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp.gmail.com:465
      - GF_SMTP_USER=${MF_RECOVERY_EMAIL}
      - GF_SMTP_PASSWORD=${MF_RECOVERY_EMAIL_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${MF_RECOVERY_EMAIL}
      - GF_SMTP_FROM_NAME=ADO-RECOVERY
      - GF_SMTP_SKIP_VERIFY=true
      - GF_SERVER_DOMAIN=ado.wine-lab.org
      - GF_SERVER_HTTP_PORT=${MF_INFLUX_WRITER_GRAFANA_PORT}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/
    expose:
      - ${MF_INFLUX_WRITER_GRAFANA_PORT}
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
    networks:
      - mainflux-base-net
    volumes:
      - ./grafana/grafana_icon.svg:/usr/share/grafana/public/img/grafana_icon.svg
      - ./grafana/fav32.png:/usr/share/grafana/public/img/fav32.png
      - ./grafana/branding/Branding.tsx:/usr/share/grafana/public/app/core/components/Branding/Branding.tsx
      - ./grafana/views/index.html:/usr/share/grafana/public/views/index.html
      - ./grafana/views/error.html:/usr/share/grafana/public/views/error.html
      - ./grafana/build/app.43bf9cf1b45c36f23b7a.js:/usr/share/grafana/public/build/app.43bf9cf1b45c36f23b7a.js
      - mainflux-grafana-volume:/var/lib/grafana
 
  influxdb-reader:
    image: isuciu0/mainflux-influxdb-reader:02-01-2020
    container_name: mainflux-influxdb-reader
    restart: always
    depends_on:
      - influxdb-writer
    environment:
      MF_INFLUX_READER_LOG_LEVEL: debug
      MF_THINGS_URL: things:${MF_THINGS_AUTH_GRPC_PORT}
      MF_INFLUX_READER_PORT: ${MF_INFLUX_READER_PORT}
      MF_INFLUX_READER_DB_NAME: ${MF_INFLUX_READER_DB_NAME}
      MF_INFLUX_READER_DB_HOST: mainflux-influxdb
      MF_INFLUX_READER_DB_PORT: ${MF_INFLUX_READER_DB_PORT}
      MF_INFLUX_READER_DB_USER: ${MF_INFLUX_READER_DB_USER}
      MF_INFLUX_READER_DB_PASS: ${MF_INFLUX_READER_DB_PASS}
      MF_JAEGER_URL: ${MF_JAEGER_URL}
    ports:
      - ${MF_INFLUX_READER_PORT}:${MF_INFLUX_READER_PORT}
    networks:
      - mainflux-base-net

  user-control:
    image: isuciu0/user-control:noquerychannels  #19-03-2021
    container_name: mainflux-user-control
    restart: always
    depends_on:
      - things
    environment:
      MF_USER_CONTROL_POSTGRES_USER: ${MF_THINGS_DB_USER}
      MF_USER_CONTROL_POSTGRES_PASSWORD: ${MF_THINGS_DB_PASS}
      MF_USER_CONTROL_POSTGRES_HOST: mainflux-things-db
      MF_USER_CONTROL_POSTGRES_PORT: ${MF_THINGS_DB_PORT}
      MF_USER_CONTROL_POSTGRES_DB: ${MF_THINGS_DB}
      MF_USER_CONTROL_GRAFANA_PORT: ${MF_INFLUX_WRITER_GRAFANA_PORT}
      MF_USER_CONTROL_GRAFANA_ADMIN_NAME: ${MF_GRAFANA_ADMIN_NAME}
      MF_USER_CONTROL_GRAFANA_ADMIN_PASS: ${MF_GRAFANA_ADMIN_PASS}
      MF_USER_CONTROL_MAIL_USERNAME: ${MF_RECOVERY_EMAIL}
      MF_USER_CONTROL_MAIL_PASSWORD: ${MF_RECOVERY_EMAIL_PASSWORD}
      MF_AJAX_HTTP_PROTOCOL: https
      MF_AJAX_SERVER_IP: ado.wine-lab.org
    volumes:
      - ./dashboards:/app/grafana_backend/dashboards
    networks:
      - mainflux-base-net

